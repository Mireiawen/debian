---
## /* vim: set tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab autoindent: */

name: "Docker Image"

# Linter will thing this as truthy value
# yamllint disable-line rule:truthy
on:
  push:
    branches:
    - "main"

  schedule:
  - cron: "15 0 * * *"

defaults:
  run:
    shell: "bash"

env:
  BUILD_TAG: "build-${{ env.GITHUB_RUN_NUMBER }}"

jobs:

  lint:docker:
    name: "Lint the Dockerfiles"
    runs-on: "ubuntu-latest"
    container:
      image: "hadolint/hadolint:latest-debian"
    needs: []

    steps:
    - name: "Checkout"
      uses: "actions/checkout@v2"

    - name: "Lint the Dockerfiles"
      run: "bash 'lint.sh' --lint-docker"

  lint:shell:
    name: "Lint the shell scripts"
    runs-on: "ubuntu-latest"
    container:
      image: "koalaman/shellcheck-alpine:latest"
    defaults:
      run: "sh"
    needs: []

    steps:
    - name: "Install bash"
      run: "apk add --no-cache 'bash'"

    - name: "Checkout"
      uses: "actions/checkout@v2"

    - name: "Lint the shell scripts"
      run: "bash 'lint.sh' --lint-shell"

  lint:yaml:
    name: "Lint the YAML files"
    runs-on: "ubuntu-latest"
    container:
      image: "python:3.8"
    needs: []

    steps:
    - name: "Install the linter"
      run: "pip3 install 'yamllint'"

    - name: "Checkout"
      uses: "actions/checkout@v2"

    - name: "Lint the YAML files"
      run: "bash 'lint.sh' --lint-yaml"

  build:docker:
    name: "Build the image"
    runs-on: "ubuntu-latest"
    needs:
    - "lint:docker"
    - "lint:shell"
    - "lint:yaml"

    steps:
    - name: "Checkout"
      uses: "actions/checkout@v2"

    - name: "Cache Docker layers"
      uses: "actions/cache@v2"
      with:
        path: "/tmp/.buildx-cache"
        key: "${{ runner.os }}-buildx-${{ github.sha }}"
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: "Set up Docker Buildx"
      uses: "docker/setup-buildx-action@v1"

    - name: "Build the image"
      id: "docker_build"
      uses: "docker/build-push-action@v2"
      with:
        cache-from: "type=local,src=/tmp/.buildx-cache"
        cache-to: "type=local,dest=/tmp/.buildx-cache"
        pull: true
        tags:
        - "${{ env.GITHUB_REPOSITORY }}:${{ env.BUILD_TAG }}"
        labels:
          vcs-type: "git"
          vcs-ref: "${{ env.GITHUB_SHA }}"
          vcs-repo: "${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY }}"
        outputs:
        - "type=docker,dest=${{ env.BUILD_TAG }}.tar"

    - name: "Upload the image as artifact"
      uses: "actions/upload-artifact@v2"
      with:
        path: "${{ env.BUILD_TAG }}.tar"
        if-no-files-found: "error"
        retention-days: 7

  scan:trivy:
    name: "Scan the image"
    runs-on: "ubuntu-latest"
    needs:
    - "build:docker"

    steps:
    - name: "Download the image artifact"
      uses: "actions/download-artifact@v2"
      with:
        name: "${{ env.BUILD_TAG }}.tar"

    - name: "Load the image from file"
      run: "docker load --input '${{ env.BUILD_TAG }}.tar'"

    - name: "Build report"
      uses: "aquasecurity/trivy-action@master"
      with:
        image-ref: "${{ env.GITHUB_REPOSITORY }}:${{ env.BUILD_TAG }}"
        exit-code: 0
        ignore-unfixed: false
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'

    - name: "Upload Trivy scan results to GitHub Security tab"
      uses: "github/codeql-action/upload-sarif@v1"
      with:
        sarif_file: "trivy-results.sarif"

    - name: "Print information on high vulnerabilities"
      uses: "aquasecurity/trivy-action@master"
      with:
        image-ref: "${{ env.GITHUB_REPOSITORY }}:${{ env.BUILD_TAG }}"
        exit-code: 0
        ignore-unfixed: false
        severity: 'HIGH'
        format: 'table'

    - name: "Fail on critical vulnerabilities"
      uses: "aquasecurity/trivy-action@master"
      with:
        image-ref: "${{ env.GITHUB_REPOSITORY }}:${{ env.BUILD_TAG }}"
        exit-code: 1
        ignore-unfixed: false
        severity: 'CRITICAL'
        format: 'table'

    - name: "Fail on fixed vulnerabilities"
      uses: "aquasecurity/trivy-action@master"
      with:
        image-ref: "${{ env.GITHUB_REPOSITORY }}:${{ env.BUILD_TAG }}"
        exit-code: 1
        ignore-unfixed: true
        severity: 'MEDIUM,HIGH,CRITICAL'
        format: 'table'

  deploy:
    name: "Deploy the image"
    runs-on: "ubuntu-latest"
    needs:
    - "build:docker"
    - "scan:trivy"

    steps:
    - name: "Download the image artifact"
      uses: "actions/download-artifact@v2"
      with:
        name: "${{ env.BUILD_TAG }}.tar"

    - name: "Load the image from file"
      run: "docker load --input '${{ env.BUILD_TAG }}.tar'"

    - name: "Login to DockerHub"
      uses: "docker/login-action@v1"
      with:
        username: "${{ secrets.DOCKERHUB_USERNAME }}"
        password: "${{ secrets.DOCKERHUB_PASSWORD }}"

    - name: "Push the image"
      run: "docker push '${{ env.GITHUB_REPOSITORY }}:${{ env.BUILD_TAG }}'"
